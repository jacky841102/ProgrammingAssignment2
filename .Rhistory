install.package"rggp2"
install.packages("slidify"")
serch
install.packages("slidify"")
install.packages("slidify")
install.packages("KernSmooth")
library(KernSmooth)
x<-function() 1
x
x
x
x
x<-function() numeric(1)
x
x(1)
x()
x()
x<-function(x)
1
x
x
x
x
x
x
x
x
x
x
x
x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector
mkaeVector(1)
makeVector(1)
x$getmean
number=makeVector()
number$getmean
number$getmean()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set, get, setmean, getmean)
}
number=makeVector()
number
number$set
number$set()
number$getmean
number$getmean()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
number=makeVector()
number$getmean()
number$getmean
setwd("~/DataScience/R Programming/ProgrammingAssignment2")
source("cachematrix.R")
?matrix
test<-cbind(c(1,0),c(0,1))
test
mat<-makeCacheMatrix(test)
mat
cacheSolve(mat)
source("cachematrix.R")
cacheSolve(mat)
source("cachematrix.R")
cacheSolve(mat)
cacheSolve(mat)
View(test)
View(test)
View(test)
test
source("cachematrix.R")
cacheSolve(mat)
source("cachematrix.R")
cacheSolve(mat)
cacheSolve(mat)
cacheSolve(mat)
source("cachematrix.R")
cacheSolve(mat)
cacheSolve(mat)
mat=cbind(c(1,2),c(3,1))
mat
cacheSolve(makematrix(mat))
cacheSolve(makeMatrix(mat))
cacheSolve(makeCacheMatrix(mat))
cacheSolve(makeCacheMatrix(mat))
cacheSolve(makeCacheMatrix(mat))
mat
test=makeCacheMatri(mat)
test=makeCacheMatrix(mat)
test
cacheSolve(test)
cacheSolve(test)
cacheSolve(test)
test
cacheSolve(test)
source("cachematrix.R")
cacheSolve(test)
cacheSolve(test)
cacheSolve(test)
View(mat)
View(mat)
test=makeCacheMatrix(mat)
cacheSolve(test)
cacheSolve(test)
cacheSolve(test)
cacheSolve(test)
